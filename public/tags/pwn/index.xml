<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pwn on </title>
    <link>/tags/pwn/</link>
    <description>Recent content in Pwn on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 19 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/pwn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bypass Stack Canary Memahami Bit, Byte, dan Nilai 256 dalam bruteforce Exploit - Pwn03</title>
      <link>/posts/stack-canary-bf/</link>
      <pubDate>Tue, 19 Aug 2025 00:00:00 +0000</pubDate>
      <guid>/posts/stack-canary-bf/</guid>
      <description>&lt;h2 id=&#34;1-apa-itu-bit-dan-byte&#34;&gt;&lt;strong&gt;1. Apa Itu Bit dan Byte?&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Sebelum memahami &lt;strong&gt;stack canary&lt;/strong&gt;, kita perlu mengerti dasar-dasar &lt;strong&gt;bit&lt;/strong&gt; dan &lt;strong&gt;byte&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;1 Bit&lt;/strong&gt; = Nilai terkecil dalam komputasi (&lt;code&gt;0&lt;/code&gt; atau &lt;code&gt;1&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;1 Byte&lt;/strong&gt; = Kumpulan &lt;strong&gt;8 bit&lt;/strong&gt; (contoh: &lt;code&gt;01011010&lt;/code&gt;).&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;1 Byte bisa menyimpan nilai dari &lt;code&gt;0&lt;/code&gt; sampai &lt;code&gt;255&lt;/code&gt;&lt;/strong&gt; (total &lt;strong&gt;256 kemungkinan&lt;/strong&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Kenapa &lt;strong&gt;256&lt;/strong&gt;? Karena &lt;code&gt;2^8 = 256&lt;/code&gt; (8 bit = 256 kombinasi).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Contoh:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;00000000&lt;/code&gt; (binary) = &lt;code&gt;0&lt;/code&gt; (decimal)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;11111111&lt;/code&gt; (binary) = &lt;code&gt;255&lt;/code&gt; (decimal)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Kesimpulan:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Memahami Stack Frame dan Memory Layout - pwn02</title>
      <link>/posts/memory-layout/</link>
      <pubDate>Wed, 13 Aug 2025 00:00:00 +0000</pubDate>
      <guid>/posts/memory-layout/</guid>
      <description>&lt;p&gt;Dalam binary exploitation, memahami struktur stack frame dan memory layout adalah fundamental. Artikel ini akan menjelaskan secara step-by-step bagaimana stack bekerja, cara membaca memory dengan &lt;code&gt;pwndbg&lt;/code&gt;, dan visualisasi yang mudah dipahami. Kita mulai dari layout memory, penggunaan &lt;code&gt;pwndbg&lt;/code&gt;, parsing stack, hingga cara membacanya untuk keperluan binary exploitation.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-layout-memory-dan-stack-frame&#34;&gt;&lt;strong&gt;1. Layout Memory dan Stack Frame&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/images/memory-layout0.webp&#34; alt=&#34;Main Frame&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Stack adalah struktur data LIFO (Last In, First Out) yang digunakan untuk menyimpan data sementara, seperti variabel lokal, return address, dan saved base pointer. Berikut tahapan pembentukan stack frame:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Belajar Bahasa Assembly (x86/x64, Termasuk 32bit)</title>
      <link>/posts/assembly-language/</link>
      <pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate>
      <guid>/posts/assembly-language/</guid>
      <description>&lt;h3 id=&#34;1-apa-itu-bahasa-assembly&#34;&gt;1. Apa itu Bahasa Assembly?&lt;/h3&gt;&#xA;&lt;p&gt;Bahasa Assembly adalah bahasa pemrograman tingkat rendah yang berhubungan langsung dengan instruksi CPU.&lt;/p&gt;&#xA;&lt;p&gt;Bahasa ini tidak abstrak seperti Python atau C; setiap instruksi berhubungan langsung dengan operasi hardware.&lt;/p&gt;&#xA;&lt;p&gt;Setiap baris kode Assembly diterjemahkan oleh assembler menjadi opcode biner yang dipahami CPU.&lt;/p&gt;&#xA;&lt;p&gt;Kenapa belajar Assembly?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Memahami cara kerja komputer di level paling dasar.&lt;/li&gt;&#xA;&lt;li&gt;Berguna untuk reverse engineering, optimisasi performa, dan pemrograman embedded.&lt;/li&gt;&#xA;&lt;li&gt;Membantu memahami sistem operasi, compiler, dan arsitektur CPU.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-arsitektur-x86-vs-x64&#34;&gt;2. Arsitektur x86 vs x64&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;x86&lt;/strong&gt; → Arsitektur 32-bit (register umum: EAX, EBX, ECX, EDX, ESI, EDI, ESP, EBP).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;x64&lt;/strong&gt; → Arsitektur 64-bit (register umum lebih banyak: RAX, RBX, RCX, RDX, RSI, RDI, RSP, RBP, + R8-R15).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;32-bit vs 64-bit&lt;/strong&gt; → Perbedaan utamanya:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ukuran register (32-bit vs 64-bit)&lt;/li&gt;&#xA;&lt;li&gt;Panjang pointer (alamat memori)&lt;/li&gt;&#xA;&lt;li&gt;Instruksi tambahan di x64&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-memahami-register-cpu&#34;&gt;3. Memahami Register CPU&lt;/h3&gt;&#xA;&lt;p&gt;Register adalah ruang penyimpanan kecil di dalam CPU untuk operasi cepat.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tentang Binary Exploitation dan Buffer Overflow - pwn01</title>
      <link>/posts/buffer-overflow/</link>
      <pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate>
      <guid>/posts/buffer-overflow/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.ibb.co.com/hRyZnWQm/images-3.jpg&#34; alt=&#34;PWN THUMB&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Binary exploitation merupakan salah satu keahlian paling krusial dalam dunia penetration testing dan keamanan siber. Teknik ini memungkinkan kita menemukan dan memanfaatkan kerentanan tingkat lanjut dalam program dan sistem operasi, yang seringkali menjadi pintu masuk untuk mendapatkan kendali penuh atas sistem target (remote code execution) atau meningkatkan hak akses secara lokal (privilege escalation).&lt;/p&gt;&#xA;&lt;p&gt;Selama bertahun-tahun, berbagai proteksi telah dikembangkan untuk memitigasi kerentanan memori, mulai dari tingkat kernel sistem operasi hingga teknik kompilasi binary. Namun, selalu ada celah untuk mengeksploitasi kesalahan-kesalahan kecil dalam penanganan memori pada binary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apa itu CPU, memory, disk, register dalam reverse engineering (RE)</title>
      <link>/posts/reverse-engineering-01/</link>
      <pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate>
      <guid>/posts/reverse-engineering-01/</guid>
      <description>&lt;p&gt;Penjelasan sederhana tentang komponen komputer yang penting untuk dipahami dalam &lt;strong&gt;reverse engineering&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-cpu-central-processing-unit&#34;&gt;1. &lt;strong&gt;CPU (Central Processing Unit)&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Apa itu?&lt;/strong&gt; &amp;ldquo;Otak&amp;rdquo; komputer yang menjalankan instruksi program.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Fungsi dalam RE&lt;/strong&gt;: Ketika melakukan reverse engineering, Anda menganalisis bagaimana CPU memproses instruksi dari program (misalnya, bagaimana ia menghitung, membandingkan data, atau melompat ke bagian kode tertentu).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Contoh&lt;/strong&gt;: Saat debugging, Anda melihat instruksi assembly yang dijalankan CPU.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;cpu-itu-seperti-koki-di-dapur&#34;&gt;&lt;strong&gt;CPU itu seperti Koki di Dapur&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;Bayangkan:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt; = Koki yang melakukan semua perhitungan dan perintah.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Program&lt;/strong&gt; = Resep masakan yang harus diikuti koki.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Ketika kamu menjalankan program (misalnya &lt;code&gt;ls&lt;/code&gt; di terminal), CPU membaca instruksinya langkah demi langkah dan menjalankannya.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
