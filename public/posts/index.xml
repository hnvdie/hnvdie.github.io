<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 20 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bypassing Stack Canaries (Leak &#43; Write) - Pwn03.1</title>
      <link>/posts/bypass-stack-canary/</link>
      <pubDate>Wed, 20 Aug 2025 00:00:00 +0000</pubDate>
      <guid>/posts/bypass-stack-canary/</guid>
      <description>&lt;h2 id=&#34;-source-code-target&#34;&gt;📝 Source Code Target&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#e5e5e5&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#e5e5e5&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#e5e5e5&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#e5e5e5&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#e5e5e5&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#ee82ee&#34;&gt;char&lt;/span&gt; **argv){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff0&#34;&gt;setvbuf&lt;/span&gt;(stdout, NULL, _IONBF, &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ee82ee&#34;&gt;char&lt;/span&gt; buf[&lt;span style=&#34;color:#f60&#34;&gt;64&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ee82ee&#34;&gt;char&lt;/span&gt; flag[&lt;span style=&#34;color:#f60&#34;&gt;64&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ee82ee&#34;&gt;char&lt;/span&gt; *flag_ptr = flag;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;// Set the gid to the effective gid&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ee82ee&#34;&gt;gid_t&lt;/span&gt; gid = &lt;span style=&#34;color:#ff0&#34;&gt;getegid&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff0&#34;&gt;setresgid&lt;/span&gt;(gid, gid, gid);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff0&#34;&gt;puts&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;We will evaluate any format string you give us with printf().&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  FILE *file = &lt;span style=&#34;color:#ff0&#34;&gt;fopen&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;flag.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; (file == NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff0&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;flag.txt is missing!&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff0&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff0&#34;&gt;fgets&lt;/span&gt;(flag, &lt;span style=&#34;color:#f00&#34;&gt;sizeof&lt;/span&gt;(flag), file);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff0&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff0&#34;&gt;fgets&lt;/span&gt;(buf, &lt;span style=&#34;color:#f00&#34;&gt;sizeof&lt;/span&gt;(buf), stdin);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff0&#34;&gt;printf&lt;/span&gt;(buf);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;-langkah-1-basic-file-checks&#34;&gt;🔍 Langkah 1: Basic File Checks&lt;/h2&gt;&#xA;&lt;p&gt;Compile program dengan perlindungan stack canary:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bypass Stack Canary - Pwn03</title>
      <link>/posts/stack-canary-bf/</link>
      <pubDate>Tue, 19 Aug 2025 00:00:00 +0000</pubDate>
      <guid>/posts/stack-canary-bf/</guid>
      <description>&lt;h3 id=&#34;apa-itu-stack-canary&#34;&gt;Apa itu Stack Canary?&lt;/h3&gt;&#xA;&lt;p&gt;Stack canary adalah mekanisme keamanan yang ditempatkan di stack untuk mendeteksi buffer overflow. Namanya berasal dari analogi &amp;ldquo;canary in a coal mine&amp;rdquo; - jika canary mati, ada bahaya.&lt;/p&gt;&#xA;&lt;h3 id=&#34;cara-kerja&#34;&gt;Cara Kerja:&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Setup&lt;/strong&gt;: Saat fungsi dipanggil, nilai random (canary) ditempatkan di stack antara buffer dan return address&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Verification&lt;/strong&gt;: Sebelum fungsi kembali, nilai canary diperiksa&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Detection&lt;/strong&gt;: Jika nilai berubah, program terminate dengan segfault&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;layout-stack-dengan-canary&#34;&gt;Layout Stack dengan Canary:&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;High Addresses&#xA;+-----------------+&#xA;| Return Address  |&#xA;+-----------------+&#xA;| Saved EBP       |&#xA;+-----------------+&#xA;| Stack Canary    | ← Canary ditempatkan di sini&#xA;+-----------------+&#xA;| Local Variables |&#xA;| (termasuk buffer)|&#xA;+-----------------+&#xA;Low Addresses&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2-tools-dan-analisis&#34;&gt;2. Tools dan Analisis&lt;/h2&gt;&#xA;&lt;h3 id=&#34;tools-yang-digunakan&#34;&gt;Tools yang Digunakan:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;GDB dengan Pwndbg&lt;/strong&gt;: Debugger dengan enhancement untuk exploit development&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pwntools&lt;/strong&gt;: Python library untuk CTF exploits&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Checksec&lt;/strong&gt;: Untuk melihat proteksi binary&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Objdump&lt;/strong&gt;: Untuk melihat assembly code&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;contoh-output-pwndbg&#34;&gt;Contoh Output Pwndbg:&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gdb ./vulnerable_program&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pwndbg&amp;gt; checksec&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[*] &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#39;/home/user/vulnerable_program&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Arch:     i386-32-little&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RELRO:    Partial RELRO&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Stack:    Canary found&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    NX:       NX enabled&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PIE:      No PIE (0x8048000)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pwndbg&amp;gt; disassemble vulnerable_function&#xA;Dump of assembler code for function vulnerable_function:&#xA;   0x080484db &amp;lt;+0&amp;gt;:     push   ebp&#xA;   0x080484dc &amp;lt;+1&amp;gt;:     mov    ebp,esp&#xA;   0x080484de &amp;lt;+3&amp;gt;:     sub    esp,0x28&#xA;   0x080484e1 &amp;lt;+6&amp;gt;:     mov    eax,gs:0x14&#xA;   0x080484e7 &amp;lt;+12&amp;gt;:    mov    DWORD PTR [ebp-0xc],eax  ; Canary disimpan di [ebp-0xc]&#xA;   0x080484ea &amp;lt;+15&amp;gt;:    xor    eax,eax&#xA;   0x080484ec &amp;lt;+17&amp;gt;:    sub    esp,0x4&#xA;   0x080484ef &amp;lt;+20&amp;gt;:    push   0x100&#xA;   0x080484f4 &amp;lt;+25&amp;gt;:    lea    eax,[ebp-0x2c]&#xA;   0x080484f7 &amp;lt;+28&amp;gt;:    push   eax&#xA;   0x080484f8 &amp;lt;+29&amp;gt;:    push   0x0&#xA;   0x080484fa &amp;lt;+31&amp;gt;:    call   0x80483a0 &amp;lt;read@plt&amp;gt;&#xA;   0x080484ff &amp;lt;+36&amp;gt;:    add    esp,0x10&#xA;   0x08048502 &amp;lt;+39&amp;gt;:    mov    eax,DWORD PTR [ebp-0xc]&#xA;   0x08048505 &amp;lt;+42&amp;gt;:    xor    eax,gs:0x14&#xA;   0x0804850c &amp;lt;+49&amp;gt;:    je     0x8048513 &amp;lt;vulnerable_function+56&amp;gt;&#xA;   0x0804850e &amp;lt;+51&amp;gt;:    call   0x80483c0 &amp;lt;__stack_chk_fail@plt&amp;gt;&#xA;   0x08048513 &amp;lt;+56&amp;gt;:    leave  &#xA;   0x08048514 &amp;lt;+57&amp;gt;:    ret    &#xA;End of assembler dump.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Yang perlu dipahami dari output:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Memahami Stack Frame dan Memory Layout - pwn02</title>
      <link>/posts/memory-layout/</link>
      <pubDate>Wed, 13 Aug 2025 00:00:00 +0000</pubDate>
      <guid>/posts/memory-layout/</guid>
      <description>&lt;p&gt;Dalam binary exploitation, memahami struktur stack frame dan memory layout adalah fundamental. Artikel ini akan menjelaskan secara step-by-step bagaimana stack bekerja, cara membaca memory dengan &lt;code&gt;pwndbg&lt;/code&gt;, dan visualisasi yang mudah dipahami. Kita mulai dari layout memory, penggunaan &lt;code&gt;pwndbg&lt;/code&gt;, parsing stack, hingga cara membacanya untuk keperluan binary exploitation.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-layout-memory-dan-stack-frame&#34;&gt;&lt;strong&gt;1. Layout Memory dan Stack Frame&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/images/memory-layout0.webp&#34; alt=&#34;Main Frame&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Stack adalah struktur data LIFO (Last In, First Out) yang digunakan untuk menyimpan data sementara, seperti variabel lokal, return address, dan saved base pointer. Berikut tahapan pembentukan stack frame:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Belajar Bahasa Assembly (x86/x64, Termasuk 32bit)</title>
      <link>/posts/assembly-language/</link>
      <pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate>
      <guid>/posts/assembly-language/</guid>
      <description>&lt;h3 id=&#34;1-apa-itu-bahasa-assembly&#34;&gt;1. Apa itu Bahasa Assembly?&lt;/h3&gt;&#xA;&lt;p&gt;Bahasa Assembly adalah bahasa pemrograman tingkat rendah yang berhubungan langsung dengan instruksi CPU.&lt;/p&gt;&#xA;&lt;p&gt;Bahasa ini tidak abstrak seperti Python atau C; setiap instruksi berhubungan langsung dengan operasi hardware.&lt;/p&gt;&#xA;&lt;p&gt;Setiap baris kode Assembly diterjemahkan oleh assembler menjadi opcode biner yang dipahami CPU.&lt;/p&gt;&#xA;&lt;p&gt;Kenapa belajar Assembly?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Memahami cara kerja komputer di level paling dasar.&lt;/li&gt;&#xA;&lt;li&gt;Berguna untuk reverse engineering, optimisasi performa, dan pemrograman embedded.&lt;/li&gt;&#xA;&lt;li&gt;Membantu memahami sistem operasi, compiler, dan arsitektur CPU.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2-arsitektur-x86-vs-x64&#34;&gt;2. Arsitektur x86 vs x64&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;x86&lt;/strong&gt; → Arsitektur 32-bit (register umum: EAX, EBX, ECX, EDX, ESI, EDI, ESP, EBP).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;x64&lt;/strong&gt; → Arsitektur 64-bit (register umum lebih banyak: RAX, RBX, RCX, RDX, RSI, RDI, RSP, RBP, + R8-R15).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;32-bit vs 64-bit&lt;/strong&gt; → Perbedaan utamanya:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ukuran register (32-bit vs 64-bit)&lt;/li&gt;&#xA;&lt;li&gt;Panjang pointer (alamat memori)&lt;/li&gt;&#xA;&lt;li&gt;Instruksi tambahan di x64&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-memahami-register-cpu&#34;&gt;3. Memahami Register CPU&lt;/h3&gt;&#xA;&lt;p&gt;Register adalah ruang penyimpanan kecil di dalam CPU untuk operasi cepat.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tentang Binary Exploitation dan Buffer Overflow - pwn01</title>
      <link>/posts/buffer-overflow/</link>
      <pubDate>Mon, 11 Aug 2025 00:00:00 +0000</pubDate>
      <guid>/posts/buffer-overflow/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.ibb.co.com/hRyZnWQm/images-3.jpg&#34; alt=&#34;PWN THUMB&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Binary exploitation merupakan salah satu keahlian paling krusial dalam dunia penetration testing dan keamanan siber. Teknik ini memungkinkan kita menemukan dan memanfaatkan kerentanan tingkat lanjut dalam program dan sistem operasi, yang seringkali menjadi pintu masuk untuk mendapatkan kendali penuh atas sistem target (remote code execution) atau meningkatkan hak akses secara lokal (privilege escalation).&lt;/p&gt;&#xA;&lt;p&gt;Selama bertahun-tahun, berbagai proteksi telah dikembangkan untuk memitigasi kerentanan memori, mulai dari tingkat kernel sistem operasi hingga teknik kompilasi binary. Namun, selalu ada celah untuk mengeksploitasi kesalahan-kesalahan kecil dalam penanganan memori pada binary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apa itu CPU, memory, disk, register dalam reverse engineering (RE)</title>
      <link>/posts/reverse-engineering-01/</link>
      <pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate>
      <guid>/posts/reverse-engineering-01/</guid>
      <description>&lt;p&gt;Penjelasan sederhana tentang komponen komputer yang penting untuk dipahami dalam &lt;strong&gt;reverse engineering&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-cpu-central-processing-unit&#34;&gt;1. &lt;strong&gt;CPU (Central Processing Unit)&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Apa itu?&lt;/strong&gt; &amp;ldquo;Otak&amp;rdquo; komputer yang menjalankan instruksi program.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Fungsi dalam RE&lt;/strong&gt;: Ketika melakukan reverse engineering, Anda menganalisis bagaimana CPU memproses instruksi dari program (misalnya, bagaimana ia menghitung, membandingkan data, atau melompat ke bagian kode tertentu).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Contoh&lt;/strong&gt;: Saat debugging, Anda melihat instruksi assembly yang dijalankan CPU.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;cpu-itu-seperti-koki-di-dapur&#34;&gt;&lt;strong&gt;CPU itu seperti Koki di Dapur&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;Bayangkan:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt; = Koki yang melakukan semua perhitungan dan perintah.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Program&lt;/strong&gt; = Resep masakan yang harus diikuti koki.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Ketika kamu menjalankan program (misalnya &lt;code&gt;ls&lt;/code&gt; di terminal), CPU membaca instruksinya langkah demi langkah dan menjalankannya.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Panduan Opening Catur: Sicilian Defense &#43; 3 Variasi Populer</title>
      <link>/posts/sicilian-defense/</link>
      <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
      <guid>/posts/sicilian-defense/</guid>
      <description>&lt;h2 id=&#34;-opening-catur-sicilian-defense-pertahanan-sisilia&#34;&gt;♟️ Opening Catur: Sicilian Defense (Pertahanan Sisilia)&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Salah satu opening paling agresif dan sering dipakai Grandmaster dunia. Cocok buat kamu yang suka gaya main counter-attack!&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-dasar-opening&#34;&gt;📌 Dasar Opening&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Langkah:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1. e4 c5&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;div class=&#34;lichess-container&#34;&gt;&#xA;  &lt;iframe&#xA;    src=&#34;https://lichess.org/study/embed/yCcYyeAR/EuT5FuHx?theme=green&amp;pieceSet=maestro&amp;bg=dark&#34;&#xA;    width=&#34;100%&#34;&#xA;    height=&#34;500px&#34;&#xA;    title=&#34;Lichess Embed&#34;&#xA;    allowfullscreen&#xA;    loading=&#34;lazy&#34;&#xA;  &gt;&lt;/iframe&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;style&gt;&#xA;.lichess-container {&#xA;  text-align: center;&#xA;  margin: 1rem auto;&#xA;}&#xA;&#xA;.lichess-container iframe {&#xA;  border: none;&#xA;  outline: none;&#xA;  box-shadow: none;&#xA;  border-radius: 8px;&#xA;}&#xA;&lt;/style&gt;&#xA;&#xA;&lt;style&gt;&#xA;.lichess-container {&#xA;  text-align: center;&#xA;  margin: 1rem auto;&#xA;  overflow: hidden;  &#xA;  border-radius: 8px;  &#xA;  max-width: 100%;&#xA;}&#xA;&#xA;.lichess-container iframe {&#xA;  border: none;&#xA;  outline: none;&#xA;  display: block;&#xA;}&#xA;&lt;/style&gt;&#xA;&#xA;Hitam menyerang pusat dengan pion sayap, bukan pion tengah seperti e5. Tujuannya mengganggu dominasi Putih dan membuka jalan bagi kuda dan gajah.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Roadmap to Become an Expert Hacker (Inspired by Mr. Robot)</title>
      <link>/posts/how-to-become-a-hacker/</link>
      <pubDate>Thu, 05 Dec 2024 00:00:00 +0000</pubDate>
      <guid>/posts/how-to-become-a-hacker/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i.ibb.co.com/KWLzw2C/images-3.jpg&#34; alt=&#34;showcase&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Mr. Robot showcases a variety of hacking techniques and skills that can serve as a roadmap for aspiring ethical hackers. Below is a concise guide to hacking methods and essential skills based on the series.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;core-skills-to-master&#34;&gt;Core Skills to Master&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://i.ibb.co.com/gDsZxv1/undefined-Imgur.gif&#34; alt=&#34;bilek&#34;&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Social Engineering:&lt;/strong&gt;&#xA;Manipulate human behavior to extract sensitive information.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Network Analysis:&lt;/strong&gt; Use tools like Wireshark to monitor traffic and detect vulnerabilities.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Cryptography:&lt;/strong&gt; Encrypt and decrypt data, understand hashing algorithms, and break weak cryptographic implementations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Membuat Program Pengingat Investasi Crypto Sederhana Dengan Python</title>
      <link>/posts/make-project-invest-tracker/</link>
      <pubDate>Fri, 22 Nov 2024 00:00:00 +0000</pubDate>
      <guid>/posts/make-project-invest-tracker/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/images/ghostecho.jpg&#34; alt=&#34;pic&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;GhostNet adalah sebuah alat pengelola investasi crypto yang saya buat untuk membantu kamu dalam melacak nilai investasi dan return dari berbagai mata uang kripto. Dengan antarmuka yang sederhana, program ini dapat membantu kamu mengatur dan memantau aset crypto dengan lebih terstruktur.&lt;/p&gt;&#xA;&lt;h2 id=&#34;fitur-utama&#34;&gt;Fitur Utama&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Tambah Investasi &amp;amp; Return&lt;/strong&gt;: Menambahkan nilai investasi dan return untuk setiap mata uang kripto yang kamu pilih.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Edit Data&lt;/strong&gt;: Mengubah data investasi dan return jika terjadi perubahan nilai.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Hapus Data&lt;/strong&gt;: Menghapus data untuk mata uang kripto yang sudah tidak kamu perhatikan.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Statistik Lengkap&lt;/strong&gt;: Menampilkan total investasi, return, serta keuntungan atau kerugian secara keseluruhan.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Desain Sederhana&lt;/strong&gt;: Tampilan yang bersih dan mudah dipahami, cocok untuk pengguna pemula hingga yang sudah berpengalaman.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;penjelasan-kode-program&#34;&gt;Penjelasan Kode Program&lt;/h2&gt;&#xA;&lt;p&gt;Di bawah ini adalah penjelasan mengenai bagian-bagian kode &lt;strong&gt;GhostNet&lt;/strong&gt; yang saya buat, serta bagaimana setiap fungsi berperan dalam program.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Panduan Lengkap Jalur Belajar Analisis Teknikal From Zero to Hero</title>
      <link>/posts/technical-analysis-zero-to-hero/</link>
      <pubDate>Fri, 22 Nov 2024 00:00:00 +0000</pubDate>
      <guid>/posts/technical-analysis-zero-to-hero/</guid>
      <description>&lt;p&gt;Trading adalah seni dan ilmu yang membutuhkan pemahaman mendalam terhadap berbagai alat dan indikator yang dapat membantu kita membuat keputusan yang lebih cerdas di pasar. Bagi pemula yang bingung dari mana memulai, artikel ini akan memberikan jalur pembelajaran yang sistematis dan terstruktur, mulai dari konsep dasar hingga teknik lanjutan. Setiap konsep dan alat yang akan dibahas memiliki peran penting dalam membentuk analisis teknikal yang kuat.&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-candlestick-patterns&#34;&gt;1. Candlestick Patterns&lt;/h3&gt;&#xA;&lt;p&gt;Candlestick patterns adalah fondasi dari analisis teknikal yang mengungkapkan psikologi pasar melalui formasi harga dalam grafik. Menguasai pola candlestick seperti Doji, Hammer, Engulfing, dan Morning/Evening Star akan memberikan wawasan penting tentang kemungkinan pembalikan harga atau kelanjutan tren. Belajar membaca candlestick akan menjadi langkah pertama yang krusial dalam memahami sentimen pasar.&lt;/p&gt;</description>
    </item>
    <item>
      <title>tentang vulnerability os-command injection</title>
      <link>/posts/os-command-injection/</link>
      <pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate>
      <guid>/posts/os-command-injection/</guid>
      <description>&lt;img src=&#34;/images/cuteheker.jpeg&#34;&gt;&#xA;&#xA;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;os command injection biasanya terjadi ketika seorang web developer keliru&#xA;dalam mengatur penerimaan input didalam situsnya. biasanya terjadi ketika&#xA;form input yang dibuat menggunakan fungsi seperti &lt;code&gt;exec()&lt;/code&gt;, &lt;code&gt;system()&lt;/code&gt;, dll.&#xA;tergantung fungsi tersebut berasal dari bahasa pemogramman apa. jika python&#xA;biasanya menggunakan &lt;code&gt;os.system()&lt;/code&gt; atau &lt;code&gt;eval()&lt;/code&gt;, etc.&lt;/p&gt;&#xA;&lt;p&gt;tentu saja ini jadi sesuatu yang sangat berbahaya dikarenakan attacker dapat&#xA;memasukan perintah berbahaya kedalam shell sistem operasi yang ada disitus tersebut.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bypass IP restriction at sfile.mobi - writeup</title>
      <link>/posts/bypass-ip-restriction-at-sfile.mobi/</link>
      <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
      <guid>/posts/bypass-ip-restriction-at-sfile.mobi/</guid>
      <description>&lt;p&gt;&#xA;&lt;a href=&#34;https://www.indiedb.com/groups/tanks/images/girls-und-panzer-gif&#34; title=&#34;Girls und Panzer GIF - Indie DB&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://media.indiedb.com/cache/images/groups/1/3/2074/thumb_620x2000/maus_gif.gif&#34; alt=&#34;Girls und Panzer GIF&#34; /&gt;&lt;/a&gt;&#xA;&#xA;&#xA;write up sederhana tentang bagaimana saya bisa menemukan bug IP restriction bypass di situs sfile.mobi.&lt;/p&gt;&#xA;&lt;p&gt;dan mendapatkan reward yang lumayan, hanya karena laporan bug sepele ini.&lt;/p&gt;&#xA;&lt;h3 id=&#34;fyi-for-you-information&#34;&gt;FYI (For you information)&lt;/h3&gt;&#xA;&lt;p&gt;jadi sebelumnya saya menemukan data leakage dari salah satu website yang tidak bisa saya sebutkan. karena ini privasi web diluar sfile.mobi. yang mana&#xA;data tersebut berisi informasi seperti username, password dan email. dikarenakan situs yang terdapat data leakage tersebut adalah situs yang memiliki latar belakang seperti sfile.mobi juga. yaitu service &lt;strong&gt;free file sharing service&lt;/strong&gt;. jadinya saya mempunyai ide yang cukup cemerlang.&lt;/p&gt;</description>
    </item>
    <item>
      <title>summary of reconnaissance for web application bug hunting 🕷</title>
      <link>/posts/reconnaissance-summary/</link>
      <pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate>
      <guid>/posts/reconnaissance-summary/</guid>
      <description>&lt;img src=&#34;https://images.unsplash.com/photo-1562813733-b31f71025d54?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=869&amp;q=80&#34;&gt;&#xA;&#xA;&#xA;&lt;p&gt;&lt;code&gt;notes: &lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;in this article if you found text like this &lt;code&gt;here&lt;/code&gt; is a tools or platforms. you just search that on google or other search engines.&lt;/li&gt;&#xA;&lt;li&gt;this article will be to always updated if me found new techniques or methods.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;base&#34;&gt;base&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;whois: &lt;code&gt;whois&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;ssl information: &lt;code&gt;sslscan&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;dns enumeration: &lt;code&gt;dnsrecon&lt;/code&gt; &lt;code&gt;nslookup&lt;/code&gt; &lt;code&gt;dnsx&lt;/code&gt; &lt;code&gt;dnsenum&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;identify web technology: &lt;code&gt;whatweb&lt;/code&gt; &lt;code&gt;wappalyzer&lt;/code&gt; &lt;code&gt;cmsmap&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;check webapp firewall: &lt;code&gt;wafw00f&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;check security headers: &lt;code&gt;shcheck&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;subdo enumeration: &lt;code&gt;subfinder&lt;/code&gt; &lt;code&gt;sublist3r&lt;/code&gt; &lt;code&gt;knock&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;extracting all IP from collected subdodomain&lt;/li&gt;&#xA;&lt;li&gt;port scanning &amp;amp; banner grabbing: &lt;code&gt;nmap&lt;/code&gt; &lt;code&gt;amass&lt;/code&gt; &lt;code&gt;aquatone&lt;/code&gt; &lt;code&gt;naabu&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;check domain takeover: &lt;code&gt;subzy&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;domain &amp;amp; subdo osint: &lt;code&gt;shodan&lt;/code&gt; &lt;code&gt;censys&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;check http(s) 80/443: &lt;code&gt;httpx&lt;/code&gt; &amp;gt; &lt;code&gt;altdns&lt;/code&gt; &amp;gt; &lt;code&gt;nuclei&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;reverse IP lookup &lt;code&gt;hackertarget&lt;/code&gt; &lt;code&gt;googledork&lt;/code&gt; &lt;code&gt;bing&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;content-discovery&#34;&gt;Content discovery&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Fuzzing&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
